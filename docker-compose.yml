services:
  api:
    container_name: api
    build:
      dockerfile: deploy/Dockerfile
      context: .
    entrypoint:  ["python3.13", "main_api.py"]
    restart: unless-stopped
    ports:
      - "0.0.0.0:80:8000"
    env_file:
      - .env

    volumes:
      - .:/app
    depends_on:
      - postgres
      - clickhouse

  scrapper:
    container_name: scrapper
    build:
      dockerfile: deploy/Dockerfile
      context: .
    entrypoint:  ["python3.13", "main_scrapper.py"]
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - postgres
      - clickhouse

  postgres:
    container_name: postgres
    image: postgres:latest
    restart: unless-stopped
    env_file:
      - .env
    environment:
      PGDATA: /data/postgres
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - pgdata:/data/postgres
      - ./deploy/init_postgres.sql:/docker-entrypoint-initdb.d/create_database.sql
    healthcheck:
      test: [ "CMD", "pg_isready", "-q","-d","crypto_api", "-U", "postgres" ]
      interval: 1s
      timeout: 5s
      retries: 10

  clickhouse:
    container_name: clickhouse
    image: clickhouse/clickhouse-server:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:8123:8123"
      - "127.0.0.1:9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./deploy/init_clickhouse.sql:/docker-entrypoint-initdb.d/create_database.sql

volumes:
  pgdata:
  pgadmin:
  clickhouse_data:
